alias h=history
alias tu="top -o cpu"   # CPU
alias tm="top -o vsize" # memory
alias ra="source ~/bin/dotfiles/bash/aliases" # reload aliases
alias ea="code -w ~/bin/dotfiles/bash/aliases && ra" # edit aliases

# Git
alias gst="git status"
alias gl="git pull"
alias gp="git push"
alias gd="git diff | mate"
alias gc="git commit -v"
alias gca="git commit -v -a"
alias gb="git branch"
alias gba="git branch -a"
alias gcm="git commit -a -m"
alias gx="git log --pretty=oneline --graph --all --abbrev-commit" # GitX style on the command line
function gbt () {
	# Setup a tracking branch from [remote] [branch_name]
	git branch --track $2 $1/$2
	git checkout $2
}
alias pushall='for i in `git remote`; do git push $i; done;'
alias pullall='for i in `git remote`; do git pull $i; done;'


# ------------------------------------
# Docker alias and function
# ------------------------------------

# Get latest container ID
alias dl="docker ps -l -q"

# Get container process
alias dps="docker ps"

# Get process included stop container
alias dpa="docker ps -a"

# Get images
alias di="docker images"

# Get container IP
alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"

# Run deamonized container, e.g., $dkd base /bin/echo hello
alias dkd="docker run -d -P"

# Run interactive container, e.g., $dki base /bin/bash
alias dki="docker run -i -t -P"

# Stop all containers
dstop() { docker stop $(docker ps -a -q); }

# Remove all containers
drm() { docker rm $(docker ps -a -q); }

# Stop and Remove all containers
alias drmf='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'

# Remove all images
dri() { docker rmi $(docker images -q); }

# Dockerfile build, e.g., $dbu tcnksm/test 
dbu() { docker build -t=$1 .; }

# Show all alias related docker
dalias() { alias | grep 'docker' | sed "s/^\([^=]*\)=\(.*\)/\1 => \2/"| sed "s/['|\']//g" | sort; }

function dclean() {
	docker rmi -f $(docker images -q -a -f dangling=true)
	docker volume rm $(docker volume ls -q -f dangling=true)
}
#for Docker-compose and docker-machine

function dmssh {
	docker-machine ssh $@
}
function dmscp {
	docker-machine scp $@
}
function dme {
	eval "$(docker-machine env $1)"
}
function dml {
	docker-machine ls $@
}
function dcb {
	docker-compose build $@
}
function dcbc {
	docker-compose build --force-rm --no-cache $@
}
function dcu {
	docker-compose up --remove-orphans $@
}
function dcup {
	docker-compose up --remove-orphans --no-deps -d $@
}
function dcd {
	docker-compose down -v --remove-orphans $@
}
function dcr {
	docker-compose run --rm --service-ports $@
}
function dcres {
	docker-compose restart $@
}
function dcp {
	docker-compose push $@
}
function dcpull {
	docker-compose pull $@
}
function dcl {
	docker-compose logs -f --tail 100 $@
}

#Bash Autocomplete

# bash autocomplete 
if [ -f $(brew --prefix)/etc/bash_completion ]; then
  . $(brew --prefix)/etc/bash_completion
fi

#Visual Studio Code
function code () { VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args "$@"; }
